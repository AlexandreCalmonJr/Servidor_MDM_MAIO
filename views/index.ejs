<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>MDM Dashboard</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    .toast {
      position: fixed;
      bottom: 20px;
      right: 20px;
      padding: 12px 24px;
      border-radius: 4px;
      color: white;
      opacity: 0;
      transition: opacity 0.3s ease-in-out;
    }
    .toast.show {
      opacity: 1;
    }
    .toast.success {
      background-color: #10b981;
    }
    .toast.error {
      background-color: #ef4444;
    }
  </style>
</head>
<body class="bg-gray-100 min-h-screen">
  <div class="container mx-auto p-4">
    <!-- Cabeçalho -->
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-3xl font-bold">Painel de Gerenciamento MDM</h1>
      <div id="authSection" class="flex items-center space-x-4">
        <input id="tokenInput" type="text" placeholder="Insira o token" class="border rounded-lg p-2 hidden" />
        <button id="loginButton" onclick="login()" class="bg-blue-500 text-white rounded-lg p-2 hover:bg-blue-600 hidden">Entrar</button>
        <button id="logoutButton" onclick="logout()" class="bg-red-500 text-white rounded-lg p-2 hover:bg-red-600 hidden">Sair</button>
      </div>
    </div>

    <!-- Tabela de Dispositivos -->
    <div id="devicesSection" class="bg-white shadow-md rounded-lg overflow-hidden hidden">
      <div class="flex justify-between items-center p-4">
        <h2 class="text-xl font-semibold">Dispositivos</h2>
        <button onclick="fetchDevices()" class="bg-green-500 text-white rounded-lg p-2 hover:bg-green-600">Atualizar</button>
      </div>
      <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-gray-200" id="devicesTable">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nome</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Modelo</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">IMEI</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Serial</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Bateria</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Setor</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Andar</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Última Sinc.</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Última Conexão</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ações</th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200" id="devicesBody"></tbody>
        </table>
      </div>
    </div>

    <!-- Formulário para Enviar Comandos -->
    <div id="commandSection" class="mt-8 bg-white p-6 shadow-md rounded-lg hidden">
      <h2 class="text-xl font-semibold mb-4">Enviar Comando</h2>
      <div class="grid grid-cols-1 gap-4">
        <select id="deviceId" class="border rounded-lg p-2">
          <option value="">Selecione um dispositivo</option>
        </select>
        <select id="command" class="border rounded-lg p-2">
          <option value="lock">Bloquear Dispositivo</option>
          <option value="wipe">Apagar Dados</option>
          <option value="install_app">Instalar Aplicativo</option>
          <option value="uninstall_app">Desinstalar Aplicativo</option>
          <option value="update_app">Atualizar Aplicativo</option>
        </select>
        <input id="packageName" type="text" placeholder="Nome do Pacote (ex.: com.example.app)" class="border rounded-lg p-2" />
        <input id="apkUrl" type="text" placeholder="URL do APK (ex.: https://example.com/app.apk)" class="border rounded-lg p-2" />
        <button onclick="sendCommand()" class="bg-blue-500 text-white rounded-lg p-2 hover:bg-blue-600">Enviar Comando</button>
      </div>
    </div>

    <!-- Toast para mensagens -->
    <div id="toast" class="toast"></div>
  </div>

  <script>
    const serverUrl = 'http://192.168.0.143:3000'; // Ajustar conforme configuração
    let authToken = localStorage.getItem('authToken') || '';

    function showToast(message, type = 'success') {
      const toast = document.getElementById('toast');
      toast.textContent = message;
      toast.className = `toast show ${type}`;
      setTimeout(() => {
        toast.className = 'toast';
      }, 3000);
    }

    function updateUI() {
      const tokenInput = document.getElementById('tokenInput');
      const loginButton = document.getElementById('loginButton');
      const logoutButton = document.getElementById('logoutButton');
      const devicesSection = document.getElementById('devicesSection');
      const commandSection = document.getElementById('commandSection');

      if (authToken) {
        tokenInput.classList.add('hidden');
        loginButton.classList.add('hidden');
        logoutButton.classList.remove('hidden');
        devicesSection.classList.remove('hidden');
        commandSection.classList.remove('hidden');
        fetchDevices();
      } else {
        tokenInput.classList.remove('hidden');
        loginButton.classList.remove('hidden');
        logoutButton.classList.add('hidden');
        devicesSection.classList.add('hidden');
        commandSection.classList.add('hidden');
      }
    }

    async function login() {
      const tokenInput = document.getElementById('tokenInput');
      const token = tokenInput.value.trim();
      if (!token) {
        showToast('Por favor, insira um token', 'error');
        return;
      }

      try {
        const response = await fetch(`${serverUrl}/api/devices`, {
          headers: { 'Authorization': `Bearer ${token}` },
        });
        if (response.ok) {
          authToken = token;
          localStorage.setItem('authToken', token);
          showToast('Autenticado com sucesso');
          updateUI();
        } else {
          showToast('Token inválido', 'error');
        }
      } catch (err) {
        showToast('Erro ao autenticar', 'error');
        console.error('Erro ao autenticar:', err);
      }
    }

    function logout() {
      authToken = '';
      localStorage.removeItem('authToken');
      showToast('Sessão encerrada');
      updateUI();
    }

    async function fetchDevices() {
      if (!authToken) return;
      try {
        const response = await fetch(`${serverUrl}/api/devices`, {
          headers: { 'Authorization': `Bearer ${authToken}` },
        });
        if (!response.ok) {
          showToast('Erro ao carregar dispositivos', 'error');
          return;
        }
        const devices = await response.json();
        populateDevicesTable(devices);
        populateDeviceSelect(devices);
      } catch (err) {
        showToast('Erro ao carregar dispositivos', 'error');
        console.error('Erro ao carregar dispositivos:', err);
      }
    }

    function populateDevicesTable(devices) {
      const tbody = document.getElementById('devicesBody');
      tbody.innerHTML = '';
      devices.forEach(device => {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td class="px-6 py-4 whitespace-nowrap">${device.device_name || 'N/A'}</td>
          <td class="px-6 py-4 whitespace-nowrap">${device.device_model || 'N/A'}</td>
          <td class="px-6 py-4 whitespace-nowrap">${device.device_id || 'N/A'}</td>
          <td class="px-6 py-4 whitespace-nowrap">${device.imei || 'N/A'}</td>
          <td class="px-6 py-4 whitespace-nowrap">${device.serial_number || 'N/A'}</td>
          <td class="px-6 py-4 whitespace-nowrap">${device.battery || 'N/A'}%</td>
          <td class="px-6 py-4 whitespace-nowrap">${device.sector || 'N/A'}</td>
          <td class="px-6 py-4 whitespace-nowrap">${device.floor || 'N/A'}</td>
          <td class="px-6 py-4 whitespace-nowrap">${device.last_sync ? new Date(device.last_sync).toLocaleString() : 'N/A'}</td>
          <td class="px-6 py-4 whitespace-nowrap">${new Date(device.last_seen).toLocaleString()}</td>
          <td class="px-6 py-4 whitespace-nowrap">
            <button onclick="preFillCommand('${device.device_id}')" class="text-blue-500 hover:underline">Enviar Comando</button>
          </td>
        `;
        tbody.appendChild(row);
      });
    }

    function populateDeviceSelect(devices) {
      const select = document.getElementById('deviceId');
      select.innerHTML = '<option value="">Selecione um dispositivo</option>';
      devices.forEach(device => {
        const option = document.createElement('option');
        option.value = device.device_id;
        option.textContent = `${device.device_name || 'N/A'} (${device.device_id})`;
        select.appendChild(option);
      });
    }

    function preFillCommand(deviceId) {
      document.getElementById('deviceId').value = deviceId;
    }

    async function sendCommand() {
      const deviceId = document.getElementById('deviceId').value;
      const command = document.getElementById('command').value;
      const packageName = document.getElementById('packageName').value;
      const apkUrl = document.getElementById('apkUrl').value;

      if (!deviceId) {
        showToast('Selecione um dispositivo', 'error');
        return;
      }

      const payload = { device_id: deviceId, command };
      if (packageName) payload.packageName = packageName;
      if (apkUrl) payload.apkUrl = apkUrl;

      try {
        const response = await fetch(`${serverUrl}/api/executeCommand`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${authToken}`,
          },
          body: JSON.stringify(payload),
        });
        const result = await response.json();
        if (response.ok) {
          showToast(result.message);
          fetchDevices();
        } else {
          showToast(result.error || 'Erro ao enviar comando', 'error');
        }
      } catch (err) {
        showToast('Erro ao enviar comando', 'error');
        console.error('Erro ao enviar comando:', err);
      }
    }

    // Inicializar UI
    updateUI();
    // Atualizar a cada 30 segundos
    setInterval(fetchDevices, 30000);
  </script>
</body>
</html>